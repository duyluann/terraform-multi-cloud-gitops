name: 'Terraform GitOps'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
        default: 'dev'

env:
  TERRAFORM_VERSION: '1.0.0'
  TFLINT_VERSION: 'v0.45.0'
  TFSEC_VERSION: 'v1.0.0'
  CHECKOV_VERSION: 'master'
  DEV_DIR: './environments/dev'
  STAGING_DIR: './environments/staging'
  PROD_DIR: './environments/prod'

permissions:
  contents: read
  pull-requests: write

jobs:
  validate:
    name: 'Validate Terraform'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        environment: [dev, staging, prod]
        include:
          - environment: dev
            directory: ${{ env.DEV_DIR }}
          - environment: staging
            directory: ${{ env.STAGING_DIR }}
          - environment: prod
            directory: ${{ env.PROD_DIR }}

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Setup tflint
      uses: terraform-linters/setup-tflint@v3
      with:
        tflint_version: ${{ env.TFLINT_VERSION }}

    - name: Setup tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        soft_fail: true

    - name: Setup Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ${{ matrix.directory }}
        soft_fail: true

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ${{ matrix.directory }}

    - name: Terraform Validate
      id: validate
      run: terraform validate
      working-directory: ${{ matrix.directory }}

    - name: Run tflint
      id: tflint
      run: tflint --init && tflint
      working-directory: ${{ matrix.directory }}
      continue-on-error: true

    - name: Run tfsec
      id: tfsec
      run: tfsec .
      working-directory: ${{ matrix.directory }}
      continue-on-error: true

    - name: Run Checkov
      id: checkov
      run: checkov -d .
      working-directory: ${{ matrix.directory }}
      continue-on-error: true

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      working-directory: ${{ matrix.directory }}
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v6
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        TFLINT: "tflint\n${{ steps.tflint.outputs.stdout }}"
        TFSEC: "tfsec\n${{ steps.tfsec.outputs.stdout }}"
        CHECKOV: "checkov\n${{ steps.checkov.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Validation Summary for ${{ matrix.environment }} Environment
          #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Lint üîç\`${{ steps.tflint.outcome }}\`
          #### Terraform Security Scan üîí\`${{ steps.tfsec.outcome }}\`
          #### Terraform Compliance Check ‚úÖ\`${{ steps.checkov.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          <details><summary>Show Lint Results</summary>

          \`\`\`\n
          ${process.env.TFLINT}
          \`\`\`

          </details>

          <details><summary>Show Security Scan Results</summary>

          \`\`\`\n
          ${process.env.TFSEC}
          \`\`\`

          </details>

          <details><summary>Show Compliance Check Results</summary>

          \`\`\`\n
          ${process.env.CHECKOV}
          \`\`\`

          </details>`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: output
          })

    - name: Print Workflow Summary
      if: always()
      run: |
        echo "## Terraform Validation Summary for ${{ matrix.environment }} Environment" >> $GITHUB_STEP_SUMMARY
        echo "### Format Check" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ steps.fmt.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "### Initialization" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ steps.init.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "### Validation" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ steps.validate.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "### Linting" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ steps.tflint.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "### Security Scan" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ steps.tfsec.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "### Compliance Check" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ steps.checkov.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "### Plan" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ steps.plan.outcome }}" >> $GITHUB_STEP_SUMMARY

  apply-to-dev:
    name: 'Apply to Dev'
    runs-on: ubuntu-latest
    environment: dev
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ${{ env.DEV_DIR }}

    - name: Terraform Apply
      id: apply
      run: terraform apply -auto-approve
      working-directory: ${{ env.DEV_DIR }}

    - name: Print Workflow Summary
      if: always()
      run: |
        echo "## Dev Environment Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "### Initialization" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ steps.init.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "### Apply" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ steps.apply.outcome }}" >> $GITHUB_STEP_SUMMARY

  apply-to-staging:
    name: 'Apply to Staging'
    needs: apply-to-dev
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.STAGING_DIR }}

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: ${{ env.STAGING_DIR }}

      - name: Print Workflow Summary
        if: always()
        run: |
          echo "## Staging Environment Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Initialization" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ steps.init.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "### Apply" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ steps.apply.outcome }}" >> $GITHUB_STEP_SUMMARY

  apply-to-prod:
    name: 'Apply to Production'
    needs: apply-to-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.PROD_DIR }}

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: ${{ env.PROD_DIR }}

      - name: Print Workflow Summary
        if: always()
        run: |
          echo "## Production Environment Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Initialization" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ steps.init.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "### Apply" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ steps.apply.outcome }}" >> $GITHUB_STEP_SUMMARY
