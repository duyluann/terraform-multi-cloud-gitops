name: Terraform GitOps

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'environments/**'
      - '.github/workflows/terraform.yml'
  push:
    branches: [ main ]
    paths:
      - 'environments/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  TERRAFORM_VERSION: '1.0.0'
  TFLINT_VERSION: 'v0.45.0'
  TFSEC_VERSION: 'v1.0.0'
  CHECKOV_VERSION: 'master'

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging, prod]
        include:
          - environment: dev
            directory: './environments/dev'
          - environment: staging
            directory: './environments/staging'
          - environment: prod
            directory: './environments/prod'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug AWS credentials
        run: |
          echo "AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID != '' && '***' || 'NOT SET' }}"
          echo "AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY != '' && '***' || 'NOT SET' }}"
          echo "AWS_REGION: ${{ secrets.AWS_REGION != '' && '***' || 'NOT SET' }}"

      # AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # GCP Credentials
      - name: Google Auth
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Azure Credentials
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ matrix.directory }}
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ matrix.directory }}
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ${{ matrix.directory }}
        continue-on-error: true

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: TFLint
        id: tflint
        run: tflint
        working-directory: ${{ matrix.directory }}
        continue-on-error: true

      - name: TFSec
        id: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: ${{ matrix.directory }}
        continue-on-error: true

      - name: Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ matrix.directory }}
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: ${{ matrix.directory }}
        continue-on-error: true

      - name: Capture Command Outputs
        id: capture
        run: |
          echo "fmt_output<<EOF" >> $GITHUB_OUTPUT
          terraform fmt -check ${{ matrix.directory }} 2>&1 || true >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "init_output<<EOF" >> $GITHUB_OUTPUT
          terraform init ${{ matrix.directory }} 2>&1 || true >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "validate_output<<EOF" >> $GITHUB_OUTPUT
          terraform validate ${{ matrix.directory }} 2>&1 || true >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "tflint_output<<EOF" >> $GITHUB_OUTPUT
          tflint ${{ matrix.directory }} 2>&1 || true >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "plan_output<<EOF" >> $GITHUB_OUTPUT
          terraform plan -no-color ${{ matrix.directory }} 2>&1 || true >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const getStatusEmoji = (status) => status === 'success' ? '✅' : '❌';
            const getDetails = (output) => output ? `\n\`\`\`\n${output}\n\`\`\`` : '';

            const output = `#### Terraform Validation Results for ${{ matrix.environment }} Environment

            * **Format Check:** ${getStatusEmoji('${{ steps.fmt.outcome }}')}
            ${getDetails('${{ steps.capture.outputs.fmt_output }}')}

            * **Initialization:** ${getStatusEmoji('${{ steps.init.outcome }}')}
            ${getDetails('${{ steps.capture.outputs.init_output }}')}

            * **Validation:** ${getStatusEmoji('${{ steps.validate.outcome }}')}
            ${getDetails('${{ steps.capture.outputs.validate_output }}')}

            * **Linting:** ${getStatusEmoji('${{ steps.tflint.outcome }}')}
            ${getDetails('${{ steps.capture.outputs.tflint_output }}')}

            * **Security Scan:** ${getStatusEmoji('${{ steps.tfsec.outcome }}')}
            * **Compliance Check:** ${getStatusEmoji('${{ steps.checkov.outcome }}')}

            * **Plan:** ${getStatusEmoji('${{ steps.plan.outcome }}')}
            ${getDetails('${{ steps.capture.outputs.plan_output }}')}

            ---
            _Note: This is an automated validation report. Please address any issues marked with ❌ before merging._`;

            // Delete previous comments from this workflow
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.name,
              issue_number: context.issue.number
            });

            const botComments = comments.data.filter(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('Terraform Validation Results')
            );

            for (const comment of botComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.name,
                comment_id: comment.id
              });
            }

            // Create new comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: output
            });

      - name: Print Workflow Summary
        run: |
          echo "## Terraform Validation Results for ${{ matrix.environment }} Environment" >> $GITHUB_STEP_SUMMARY
          echo "- Format Check: ${{ steps.fmt.outcome }}"
          echo "- Initialization: ${{ steps.init.outcome }}"
          echo "- Validation: ${{ steps.validate.outcome }}"
          echo "- Linting: ${{ steps.tflint.outcome }}"
          echo "- Security Scan: ${{ steps.tfsec.outcome }}"
          echo "- Compliance Check: ${{ steps.checkov.outcome }}"
          echo "- Plan: ${{ steps.plan.outcome }}"

          if [ "${{ steps.fmt.outcome }}" != "success" ]; then
            echo "### Format Check Details"
            echo '```'
            echo "${{ steps.capture.outputs.fmt_output }}"
            echo '```'
          fi

          if [ "${{ steps.init.outcome }}" != "success" ]; then
            echo "### Initialization Details"
            echo '```'
            echo "${{ steps.capture.outputs.init_output }}"
            echo '```'
          fi

          if [ "${{ steps.validate.outcome }}" != "success" ]; then
            echo "### Validation Details"
            echo '```'
            echo "${{ steps.capture.outputs.validate_output }}"
            echo '```'
          fi

          if [ "${{ steps.tflint.outcome }}" != "success" ]; then
            echo "### Linting Details"
            echo '```'
            echo "${{ steps.capture.outputs.tflint_output }}"
            echo '```'
          fi

          if [ "${{ steps.plan.outcome }}" != "success" ]; then
            echo "### Plan Details"
            echo '```'
            echo "${{ steps.capture.outputs.plan_output }}"
            echo '```'
          fi

  apply-to-dev:
    name: Apply to Dev
    needs: validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # GCP Credentials
      - name: Google Auth
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Azure Credentials
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./environments/dev

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./environments/dev

      - name: Print Workflow Summary
        run: |
          echo "## Dev Environment Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Initialization: ${{ steps.init.outcome }}"
          echo "- Apply: ${{ steps.apply.outcome }}"

  apply-to-staging:
    name: Apply to Staging
    needs: apply-to-dev
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # GCP Credentials
      - name: Google Auth
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Azure Credentials
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./environments/staging

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./environments/staging

      - name: Print Workflow Summary
        run: |
          echo "## Staging Environment Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Initialization: ${{ steps.init.outcome }}"
          echo "- Apply: ${{ steps.apply.outcome }}"

  apply-to-prod:
    name: Apply to Production
    needs: apply-to-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # GCP Credentials
      - name: Google Auth
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Azure Credentials
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./environments/prod

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./environments/prod

      - name: Print Workflow Summary
        run: |
          echo "## Production Environment Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Initialization: ${{ steps.init.outcome }}"
          echo "- Apply: ${{ steps.apply.outcome }}"

