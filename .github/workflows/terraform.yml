name: Terraform GitOps

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'environments/**'
      - '.github/workflows/terraform.yml'
  push:
    branches: [ main ]
    paths:
      - 'environments/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  TERRAFORM_VERSION: '1.0.0'
  TFLINT_VERSION: 'v0.45.0'
  TFSEC_VERSION: 'v1.0.0'
  CHECKOV_VERSION: 'master'

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging, prod]
        include:
          - environment: dev
            directory: './environments/dev'
          - environment: staging
            directory: './environments/staging'
          - environment: prod
            directory: './environments/prod'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ matrix.directory }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ matrix.directory }}

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ${{ matrix.directory }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: TFLint
        run: tflint
        working-directory: ${{ matrix.directory }}

      - name: TFSec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: ${{ matrix.directory }}

      - name: Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ matrix.directory }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: ${{ matrix.directory }}

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Validation Results for ${{ matrix.environment }} Environment
            * **Format Check:** ${process.env.FMT_STATUS || '❌'}
            * **Initialization:** ${process.env.INIT_STATUS || '❌'}
            * **Validation:** ${process.env.VALIDATE_STATUS || '❌'}
            * **Linting:** ${process.env.LINT_STATUS || '❌'}
            * **Security Scan:** ${process.env.SECURITY_STATUS || '❌'}
            * **Compliance Check:** ${process.env.COMPLIANCE_STATUS || '❌'}
            * **Plan:** ${process.env.PLAN_STATUS || '❌'}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: output
            });

      - name: Print Workflow Summary
        run: |
          echo "## Terraform Validation Results for ${{ matrix.environment }} Environment" >> $GITHUB_STEP_SUMMARY
          echo "- Format Check: ${{ steps.fmt.outcome }}"
          echo "- Initialization: ${{ steps.init.outcome }}"
          echo "- Validation: ${{ steps.validate.outcome }}"
          echo "- Linting: ${{ steps.tflint.outcome }}"
          echo "- Security Scan: ${{ steps.tfsec.outcome }}"
          echo "- Compliance Check: ${{ steps.checkov.outcome }}"
          echo "- Plan: ${{ steps.plan.outcome }}"

  apply-to-dev:
    name: Apply to Dev
    needs: validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./environments/dev

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./environments/dev

      - name: Print Workflow Summary
        run: |
          echo "## Dev Environment Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Initialization: ${{ steps.init.outcome }}"
          echo "- Apply: ${{ steps.apply.outcome }}"

  apply-to-staging:
    name: Apply to Staging
    needs: apply-to-dev
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./environments/staging

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./environments/staging

      - name: Print Workflow Summary
        run: |
          echo "## Staging Environment Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Initialization: ${{ steps.init.outcome }}"
          echo "- Apply: ${{ steps.apply.outcome }}"

  apply-to-prod:
    name: Apply to Production
    needs: apply-to-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./environments/prod

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./environments/prod

      - name: Print Workflow Summary
        run: |
          echo "## Production Environment Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Initialization: ${{ steps.init.outcome }}"
          echo "- Apply: ${{ steps.apply.outcome }}"
